{"ast":null,"code":"const API_URL = 'http://localhost:5000/api';\nexport const signupUser = async userData => {\n  const response = await fetch(`${API_URL}/auth/signup`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userData)\n  });\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.message || 'Failed to sign up');\n  }\n  return response.json();\n};\nexport const loginUser = async credentials => {\n  const response = await fetch(`${API_URL}/auth/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(credentials)\n  });\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.message || 'Failed to log in');\n  }\n  return response.json();\n};\nexport const getUserProfile = async userId => {\n  // In a real app, you'd send an auth token in the headers\n  const response = await fetch(`${API_URL}/users/${userId}`);\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.message || 'Failed to fetch user profile');\n  }\n  return response.json();\n};","map":{"version":3,"names":["API_URL","signupUser","userData","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","Error","message","loginUser","credentials","getUserProfile","userId"],"sources":["C:/Users/Praveen/EcoChamps/client/src/services/apiService.ts"],"sourcesContent":["const API_URL = 'http://localhost:5000/api';\n\nexport const signupUser = async (userData: any) => {\n  const response = await fetch(`${API_URL}/auth/signup`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.message || 'Failed to sign up');\n  }\n\n  return response.json();\n};\n\nexport const loginUser = async (credentials: any) => {\n  const response = await fetch(`${API_URL}/auth/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(credentials),\n  });\n\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.message || 'Failed to log in');\n  }\n\n  return response.json();\n};\n\nexport const getUserProfile = async (userId: string) => {\n  // In a real app, you'd send an auth token in the headers\n  const response = await fetch(`${API_URL}/users/${userId}`);\n\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.message || 'Failed to fetch user profile');\n  }\n\n  return response.json();\n};\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,2BAA2B;AAE3C,OAAO,MAAMC,UAAU,GAAG,MAAOC,QAAa,IAAK;EACjD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,cAAc,EAAE;IACrDK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ;EAC/B,CAAC,CAAC;EAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,mBAAmB,CAAC;EAC3D;EAEA,OAAOX,QAAQ,CAACS,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMG,SAAS,GAAG,MAAOC,WAAgB,IAAK;EACnD,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,aAAa,EAAE;IACpDK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACO,WAAW;EAClC,CAAC,CAAC;EAEF,IAAI,CAACb,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,kBAAkB,CAAC;EAC1D;EAEA,OAAOX,QAAQ,CAACS,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMK,cAAc,GAAG,MAAOC,MAAc,IAAK;EACtD;EACA,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,UAAUkB,MAAM,EAAE,CAAC;EAE1D,IAAI,CAACf,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,8BAA8B,CAAC;EACtE;EAEA,OAAOX,QAAQ,CAACS,IAAI,CAAC,CAAC;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}